# React Router Setup, Configuration, and Development Workflow

## Installation and Setup

### 1. **Basic Installation**

```bash
# Using npm
npm install react-router-dom

# Using yarn
yarn add react-router-dom

# Using pnpm
pnpm add react-router-dom

# Using bun
bun add react-router-dom
```

### 2. **TypeScript Support**

```bash
# Install TypeScript types (included with react-router-dom)
npm install @types/react @types/react-dom
```

### 3. **Framework Integration**

#### Create React App
```bash
npx create-react-app my-app --template typescript
cd my-app
npm install react-router-dom
```

#### Vite
```bash
npm create vite@latest my-app -- --template react-ts
cd my-app
npm install react-router-dom
```

#### Next.js (Alternative)
```bash
npx create-next-app@latest my-app --typescript
# Note: Next.js has its own routing system
```

## Router Configuration

### 1. **Browser Router Setup**

```typescript
// src/main.tsx or src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
```

### 2. **Data Router Setup (Recommended)**

```typescript
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { RouterProvider, createBrowserRouter } from 'react-router-dom';
import { routes } from './routes';

const router = createBrowserRouter(routes);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);
```

### 3. **Route Configuration**

```typescript
// src/routes.tsx
import { RouteObject } from 'react-router-dom';
import RootLayout from './layouts/RootLayout';
import HomePage from './pages/HomePage';
import AboutPage from './pages/AboutPage';
import UserPage from './pages/UserPage';
import ErrorPage from './pages/ErrorPage';

export const routes: RouteObject[] = [
  {
    path: '/',
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        element: <HomePage />,
        loader: homeLoader,
        action: homeAction,
      },
      {
        path: 'about',
        element: <AboutPage />,
        loader: aboutLoader,
      },
      {
        path: 'users/:userId',
        element: <UserPage />,
        loader: userLoader,
        action: userAction,
      },
    ],
  },
];

// Loader functions
async function homeLoader() {
  const response = await fetch('/api/home');
  return response.json();
}

async function aboutLoader() {
  const response = await fetch('/api/about');
  return response.json();
}

async function userLoader({ params }: { params: { userId: string } }) {
  const response = await fetch(`/api/users/${params.userId}`);
  if (!response.ok) {
    throw new Response('User not found', { status: 404 });
  }
  return response.json();
}

// Action functions
async function homeAction({ request }: { request: Request }) {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);
  
  // Process form data
  const response = await fetch('/api/home', {
    method: 'POST',
    body: JSON.stringify(data),
  });
  
  if (!response.ok) {
    throw new Error('Failed to submit form');
  }
  
  return response.json();
}

async function userAction({ request, params }: { request: Request; params: { userId: string } }) {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);
  
  const response = await fetch(`/api/users/${params.userId}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  });
  
  if (!response.ok) {
    throw new Error('Failed to update user');
  }
  
  return response.json();
}
```

## Development Environment Setup

### 1. **Project Structure**

```
src/
├── components/
│   ├── common/
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   └── Modal.tsx
│   ├── layout/
│   │   ├── Header.tsx
│   │   ├── Sidebar.tsx
│   │   └── Footer.tsx
│   └── forms/
│       ├── LoginForm.tsx
│       └── UserForm.tsx
├── pages/
│   ├── HomePage.tsx
│   ├── AboutPage.tsx
│   ├── UserPage.tsx
│   └── ErrorPage.tsx
├── layouts/
│   ├── RootLayout.tsx
│   ├── DashboardLayout.tsx
│   └── AuthLayout.tsx
├── hooks/
│   ├── useAuth.ts
│   ├── useApi.ts
│   └── useLocalStorage.ts
├── utils/
│   ├── api.ts
│   ├── validation.ts
│   └── helpers.ts
├── types/
│   ├── user.ts
│   ├── api.ts
│   └── common.ts
├── routes.tsx
├── App.tsx
└── main.tsx
```

### 2. **TypeScript Configuration**

```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/components/*": ["src/components/*"],
      "@/pages/*": ["src/pages/*"],
      "@/hooks/*": ["src/hooks/*"],
      "@/utils/*": ["src/utils/*"],
      "@/types/*": ["src/types/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

### 3. **ESLint Configuration**

```json
// .eslintrc.json
{
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "jsx-a11y"
  ],
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["to"]
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
```

### 4. **Prettier Configuration**

```json
// .prettierrc
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "avoid"
}
```

## Development Workflow

### 1. **Component Development Pattern**

```typescript
// src/components/common/Button.tsx
import React from 'react';
import { Link } from 'react-router-dom';

interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  loading?: boolean;
  to?: string; // For Link buttons
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

export function Button({
  children,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  loading = false,
  to,
  onClick,
  type = 'button',
  className = '',
}: ButtonProps) {
  const baseClasses = 'btn';
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    danger: 'btn-danger',
  };
  const sizeClasses = {
    small: 'btn-sm',
    medium: 'btn-md',
    large: 'btn-lg',
  };

  const classes = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    loading && 'btn-loading',
    className,
  ]
    .filter(Boolean)
    .join(' ');

  if (to) {
    return (
      <Link to={to} className={classes} onClick={onClick}>
        {loading && <span className="spinner" />}
        {children}
      </Link>
    );
  }

  return (
    <button
      type={type}
      className={classes}
      disabled={disabled || loading}
      onClick={onClick}
    >
      {loading && <span className="spinner" />}
      {children}
    </button>
  );
}
```

### 2. **Page Component Pattern**

```typescript
// src/pages/UserPage.tsx
import React from 'react';
import { useLoaderData, useActionData, Form, useNavigation } from 'react-router-dom';
import { Button } from '@/components/common/Button';
import { UserForm } from '@/components/forms/UserForm';
import type { User, ActionData } from '@/types/user';

export default function UserPage() {
  const user = useLoaderData() as User;
  const actionData = useActionData() as ActionData;
  const navigation = useNavigation();
  const isSubmitting = navigation.state === 'submitting';

  return (
    <div className="user-page">
      <header className="page-header">
        <h1>User Profile</h1>
        <Button to="/users" variant="secondary">
          Back to Users
        </Button>
      </header>

      <div className="user-content">
        {actionData?.error && (
          <div className="error-message">
            {actionData.error}
          </div>
        )}

        <Form method="post">
          <UserForm user={user} />
          
          <div className="form-actions">
            <Button
              type="submit"
              disabled={isSubmitting}
              loading={isSubmitting}
            >
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </Button>
            
            <Button
              type="button"
              variant="secondary"
              to={`/users/${user.id}`}
            >
              Cancel
            </Button>
          </div>
        </Form>
      </div>
    </div>
  );
}
```

### 3. **Layout Component Pattern**

```typescript
// src/layouts/RootLayout.tsx
import React from 'react';
import { Outlet, useLocation, useNavigation } from 'react-router-dom';
import { Header } from '@/components/layout/Header';
import { Sidebar } from '@/components/layout/Sidebar';
import { LoadingSpinner } from '@/components/common/LoadingSpinner';

export default function RootLayout() {
  const location = useLocation();
  const navigation = useNavigation();
  const isLoading = navigation.state === 'loading';

  return (
    <div className="app-layout">
      <Header />
      
      <div className="main-container">
        <Sidebar />
        
        <main className="main-content">
          {isLoading && (
            <div className="loading-overlay">
              <LoadingSpinner />
            </div>
          )}
          
          <Outlet />
        </main>
      </div>
    </div>
  );
}
```

### 4. **Custom Hook Pattern**

```typescript
// src/hooks/useAuth.ts
import { useCallback, useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import type { User } from '@/types/user';

interface AuthState {
  user: User | null;
  isLoading: boolean;
  error: string | null;
}

export function useAuth() {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isLoading: true,
    error: null,
  });
  
  const navigate = useNavigate();
  const location = useLocation();

  const login = useCallback(async (credentials: { email: string; password: string }) => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));
      
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        throw new Error('Login failed');
      }

      const user = await response.json();
      setAuthState({ user, isLoading: false, error: null });
      
      // Redirect to intended page or dashboard
      const from = location.state?.from?.pathname || '/dashboard';
      navigate(from, { replace: true });
    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Login failed',
      }));
    }
  }, [navigate, location]);

  const logout = useCallback(async () => {
    try {
      await fetch('/api/auth/logout', { method: 'POST' });
      setAuthState({ user: null, isLoading: false, error: null });
      navigate('/login');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  }, [navigate]);

  const checkAuth = useCallback(async () => {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        const user = await response.json();
        setAuthState({ user, isLoading: false, error: null });
      } else {
        setAuthState({ user: null, isLoading: false, error: null });
      }
    } catch (error) {
      setAuthState({ user: null, isLoading: false, error: null });
    }
  }, []);

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  return {
    ...authState,
    login,
    logout,
    checkAuth,
  };
}
```

## Testing Setup

### 1. **Testing Configuration**

```typescript
// src/test/setup.ts
import '@testing-library/jest-dom';
import { vi } from 'vitest';

// Mock fetch globally
global.fetch = vi.fn();

// Mock IntersectionObserver
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock ResizeObserver
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));
```

### 2. **Test Utilities**

```typescript
// src/test/utils.tsx
import React from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { MemoryRouter, MemoryRouterProps } from 'react-router-dom';
import { routes } from '@/routes';

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  routerProps?: MemoryRouterProps;
}

function AllTheProviders({ children, routerProps }: { children: React.ReactNode; routerProps?: MemoryRouterProps }) {
  return (
    <MemoryRouter {...routerProps}>
      {children}
    </MemoryRouter>
  );
}

export function customRender(
  ui: React.ReactElement,
  options: CustomRenderOptions = {}
) {
  const { routerProps, ...renderOptions } = options;
  
  return render(ui, {
    wrapper: ({ children }) => AllTheProviders({ children, routerProps }),
    ...renderOptions,
  });
}

export * from '@testing-library/react';
export { customRender as render };
```

### 3. **Component Testing**

```typescript
// src/components/common/Button.test.tsx
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@/test/utils';
import { Button } from './Button';

describe('Button', () => {
  it('renders with default props', () => {
    render(<Button>Click me</Button>);
    
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toBeInTheDocument();
    expect(button).toHaveClass('btn', 'btn-primary', 'btn-md');
  });

  it('renders as a link when to prop is provided', () => {
    render(<Button to="/test">Go to test</Button>);
    
    const link = screen.getByRole('link', { name: /go to test/i });
    expect(link).toBeInTheDocument();
    expect(link).toHaveAttribute('href', '/test');
  });

  it('calls onClick when clicked', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    const button = screen.getByRole('button');
    fireEvent.click(button);
    
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('shows loading state', () => {
    render(<Button loading>Loading</Button>);
    
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
    expect(button).toHaveClass('btn-loading');
    expect(screen.getByText('Loading')).toBeInTheDocument();
  });
});
```

### 4. **Page Testing**

```typescript
// src/pages/UserPage.test.tsx
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, waitFor } from '@/test/utils';
import { createMemoryRouter, RouterProvider } from 'react-router-dom';
import { routes } from '@/routes';

// Mock the loader
vi.mock('@/routes', () => ({
  routes: [
    {
      path: '/users/:userId',
      element: <div>User Page</div>,
      loader: vi.fn(),
    },
  ],
}));

describe('UserPage', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders user data', async () => {
    const mockUser = { id: '1', name: 'John Doe', email: 'john@example.com' };
    
    // Mock the loader to return user data
    vi.mocked(routes[0].loader).mockResolvedValue(mockUser);
    
    const router = createMemoryRouter(routes, {
      initialEntries: ['/users/1'],
    });
    
    render(<RouterProvider router={router} />);
    
    await waitFor(() => {
      expect(screen.getByText('User Page')).toBeInTheDocument();
    });
  });
});
```

## Build and Deployment

### 1. **Vite Configuration**

```typescript
// vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
        },
      },
    },
  },
  server: {
    port: 3000,
    open: true,
  },
  preview: {
    port: 4173,
  },
});
```

### 2. **Environment Configuration**

```bash
# .env.development
VITE_API_URL=http://localhost:3001/api
VITE_APP_NAME=My App (Dev)
VITE_ENABLE_DEBUG=true

# .env.production
VITE_API_URL=https://api.myapp.com
VITE_APP_NAME=My App
VITE_ENABLE_DEBUG=false
```

### 3. **Deployment Scripts**

```json
// package.json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint src --ext ts,tsx --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write src/**/*.{ts,tsx,js,jsx,json,css,md}",
    "format:check": "prettier --check src/**/*.{ts,tsx,js,jsx,json,css,md}"
  }
}
```

## Performance Optimization

### 1. **Code Splitting**

```typescript
// src/routes.tsx
import { lazy } from 'react';
import { RouteObject } from 'react-router-dom';

// Lazy load pages
const HomePage = lazy(() => import('@/pages/HomePage'));
const AboutPage = lazy(() => import('@/pages/AboutPage'));
const UserPage = lazy(() => import('@/pages/UserPage'));
const DashboardPage = lazy(() => import('@/pages/DashboardPage'));

export const routes: RouteObject[] = [
  {
    path: '/',
    element: <RootLayout />,
    children: [
      {
        index: true,
        element: <HomePage />,
      },
      {
        path: 'about',
        element: <AboutPage />,
      },
      {
        path: 'users/:userId',
        element: <UserPage />,
      },
      {
        path: 'dashboard',
        element: <DashboardPage />,
      },
    ],
  },
];
```

### 2. **Prefetching**

```typescript
// src/components/common/Link.tsx
import { Link as RouterLink, LinkProps } from 'react-router-dom';
import { useFetcher } from 'react-router-dom';

interface PrefetchLinkProps extends LinkProps {
  prefetch?: boolean;
}

export function Link({ prefetch = true, ...props }: PrefetchLinkProps) {
  const fetcher = useFetcher();

  const handleMouseEnter = () => {
    if (prefetch && props.to) {
      fetcher.load(props.to as string);
    }
  };

  return (
    <RouterLink
      {...props}
      onMouseEnter={handleMouseEnter}
    />
  );
}
```

### 3. **Caching Strategy**

```typescript
// src/hooks/useCache.ts
import { useCallback, useRef } from 'react';

interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number;
}

export function useCache<T>(ttl: number = 5 * 60 * 1000) {
  const cache = useRef<Map<string, CacheEntry<T>>>(new Map());

  const get = useCallback((key: string): T | null => {
    const entry = cache.current.get(key);
    if (!entry) return null;

    const isExpired = Date.now() - entry.timestamp > entry.ttl;
    if (isExpired) {
      cache.current.delete(key);
      return null;
    }

    return entry.data;
  }, []);

  const set = useCallback((key: string, data: T, customTtl?: number) => {
    cache.current.set(key, {
      data,
      timestamp: Date.now(),
      ttl: customTtl || ttl,
    });
  }, [ttl]);

  const clear = useCallback(() => {
    cache.current.clear();
  }, []);

  const remove = useCallback((key: string) => {
    cache.current.delete(key);
  }, []);

  return { get, set, clear, remove };
}
```

This comprehensive setup and configuration guide provides everything needed to build, test, and deploy React Router applications with best practices and modern development workflows.
description:
globs:
alwaysApply: false
---
